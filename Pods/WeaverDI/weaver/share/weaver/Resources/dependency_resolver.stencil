
{% macro ParametersDecl parameters %}{% for parameter in parameters %}{{parameter.name}}: {{parameter.type}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro ParametersDeclWithSeparator parameters %}{% if parameters %}, {% endif %}{% call ParametersDecl dependencyContainer.parameters %}{% endmacro %}

{% macro ParametersPassIn parameters %}{% for parameter in parameters %}{{parameter.name}}: {{parameter.name}}{% if not forloop.last %}, {% endif %}{% endfor %}{% endmacro %}
{% macro ParametersPassInWithSeparator parameters %}{% if parameters %}, {% endif %}{% call ParametersPassIn parameters %}{% endmacro %}

{% macro ParameterAssign parameters %}
        {% for parameter in parameters %}
        self.{{parameter.name}} = {{parameter.name}}
        {% endfor %}
{% endmacro %}

{% macro AttributesDecl dependencies %}
{% for dependency in dependencies %}
    let {{dependency.name}}: {{dependency.abstractType}}
{% endfor %}
{% endmacro %}

{% macro DependencyResolverDecl dependencies %}
{% for dependency in dependencies %}

    {% if not dependency.customBuilder %}

    {% if dependency.parameters %}
    func {{dependency.name}}({% call ParametersDecl dependency.parameters %}) -> {{dependency.abstractType}}
    {% else %}
    var {{dependency.name}}: {{dependency.abstractType}} { get }
    {% endif %}

    {% else %}{# not dependency.customBuilder #}
    var {{dependency.name}}: {{dependency.abstractType}} { get }
    {% endif %}{# not dependency.customBuilder #}

{% endfor %}
{% endmacro %}

/// This file is generated by Weaver {{version}}
/// DO NOT EDIT!

{% for moduleName in imports %}
import {{moduleName}}
{% endfor %}{# imports #}

{% for dependencyContainer in dependencyContainers %}

// MARK: - {{dependencyContainer.targetType.name}}

{% if dependencyContainer.references %}
protocol {{dependencyContainer.targetType.name}}InputDependencyResolver {
    {% call DependencyResolverDecl dependencyContainer.references %}
}
{% endif %}

{% if not dependencyContainer.targetType.generics %}
{% if dependencyContainer.doesSupportObjc %}@objc {% endif %}protocol {{dependencyContainer.targetType.name}}DependencyResolver {

    {% call DependencyResolverDecl dependencyContainer.parameters %}

    {% call DependencyResolverDecl dependencyContainer.directReferences %}

    {% call DependencyResolverDecl dependencyContainer.registrations %}
}
{% endif %}

final class {{dependencyContainer.targetType.name}}DependencyContainer{{dependencyContainer.targetType.generics}}{% if not dependencyContainer.targetType.generics %}: {% if dependencyContainer.doesSupportObjc %}NSObject, {% endif %}{{dependencyContainer.targetType.name}}DependencyResolver{% endif %} {
    
    {% call AttributesDecl dependencyContainer.parameters %}

    {% call AttributesDecl dependencyContainer.references %}

    {% for registration in dependencyContainer.registrations %}

    {% if not registration.isTransient %}
    private {% if registration.isWeak %}weak {% endif %}var _{{registration.name}}: {{registration.abstractType}}?
    {% endif %}

    {% if registration.parameters %}
    func {{registration.name}}({% call ParametersDecl registration.parameters %}) -> {{registration.abstractType}} {
    {% else %}
    var {{registration.name}}: {{registration.abstractType}} {
    {% endif %}

        {% if not registration.isTransient %}
        if let value = _{{registration.name}} { return value }
        {% endif %}

        {% if not registration.customBuilder %}

        {% if registration.hasBuilder %}
        let dependencies = {{registration.type.name}}DependencyContainer({% if registration.hasReferences %}injecting: self{% if registration.parameters %}, {% endif %}{% endif %}{% call ParametersPassIn registration.parameters %})
        let value = {{registration.type.name}}{{registration.type.generics}}(injecting: dependencies)
        {% else %}{# registration.hasBuilder #}
        let value = {{registration.type.name}}{{registration.type.generics}}({% if registration.hasDependencyContainer %}injecting: {{registration.type.name}}DependencyContainer{{registration.type.generics}}(){% endif %})
        {% endif %}{# registration.hasBuilder #}

        {% else %}{# not registration.customBuilder #}
        let value = {{registration.customBuilder}}(self)
        {% endif %}{# not registration.customBuilder #}

        {% if not registration.isTransient %}
        _{{registration.name}} = value
        {% endif %}

        return value
    }
    {% endfor %}{# dependencyContainer.registrations #}

    {% if dependencyContainer.doesSupportObjc %}{% if not dependencyContainer.references %}{% if not dependencyContainer.parameters %}override {% endif %}{% endif %}{% endif %}init({% if dependencyContainer.references %}injecting dependencies: {{dependencyContainer.targetType.name}}InputDependencyResolver{% if dependencyContainer.parameters %}, {% endif %}{% endif %}{% call ParametersDecl dependencyContainer.parameters %}) {

        {% call ParameterAssign dependencyContainer.parameters %}

        {% for reference in dependencyContainer.references %}
        {% if reference.parameters %}
        {{reference.name}} = dependencies.{{reference.nane}}({% call ParametersPassIn dependency.parameters %})
        {% else %}
        {{reference.name}} = dependencies.{{reference.name}}
        {% endif %}
        {% endfor %}

        {% if dependencyContainer.doesSupportObjc %}super.init(){% endif %}

        {% for registration in dependencyContainer.registrations %}

        {% if not registration.isTransient %}
        {% if not registration.isWeak %}
        {% if registration.parameters %}
        _ = {{registration.name}}({% call ParametersPassIn registration.parameters %})
        {% else %}
        _ = {{registration.name}}
        {% endif %}
        {% endif %}
        {% endif %}

        {% endfor %}
    }
}

{% for injectableDependency in dependencyContainer.injectableDependencies %}
{% if injectableDependency.references %}
extension {{dependencyContainer.targetType.name}}DependencyContainer: {{injectableDependency.targetType.name}}InputDependencyResolver {}
{% endif %}
{% endfor %}

{% if dependencyContainer.doesSupportObjc %}
protocol {{dependencyContainer.targetType.name}}ObjCDependencyInjectable {}
{% endif %}

{% if dependencyContainer.isPublic %}
{% if dependencyContainer.references %}
final class {{dependencyContainer.targetType.name}}ShimDependencyContainer{{dependencyContainer.targetType.generics}}: {{dependencyContainer.targetType.name}}InputDependencyResolver {

    {% call AttributesDecl dependencyContainer.references %}

    init({% call ParametersDecl dependencyContainer.references %}) {

        {% call ParameterAssign dependencyContainer.references %}
    }
}

{% endif %}{# dependencyContainer.references #}

extension {{dependencyContainer.targetType.name}} {
    public convenience init({% call ParametersDecl dependencyContainer.references %}{% if dependencyContainer.references %}{% if dependencyContainer.parameters %}, {% endif %}{% endif %}{% call ParametersDecl dependencyContainer.parameters %}) {
        
        {% if dependencyContainer.references %}
        let shim = {{dependencyContainer.targetType.name}}ShimDependencyContainer({% call ParametersPassIn dependencyContainer.references %})
        {% endif %}

        let dependencies = {{dependencyContainer.targetType.name}}DependencyContainer({% if dependencyContainer.references %}injecting: shim{% if dependencyContainer.parameters %}, {% endif %}{% endif %}{% call ParametersPassIn dependencyContainer.parameters %})
        self.init(injecting: dependencies)
    }
}

{% endif %}{# dependencyContainer.isPublic #}

{% endfor %}{# dependencyContainers #}
